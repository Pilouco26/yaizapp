// React Native Expo .cursorrules

// React Native Expo best practices

const reactNativeExpoBestPractices = [
  "Use functional components with hooks",
  "Utilize Expo SDK features and APIs",
  "Implement proper navigation using React Navigation",
  "Use Expo's asset system for images and fonts",
  "Implement proper error handling and crash reporting",
  "Utilize Expo's push notification system",
];

// Folder structure

const folderStructure = `
assets/
src/
  components/
  screens/
  navigation/
  hooks/
  utils/
App.js
app.json
`;

// Additional instructions

const additionalInstructions = `
1. Use TypeScript for type safety
2. Implement proper styling using StyleSheet
3. Utilize Expo's vector icons
4. Use Expo's secure store for sensitive data
5. Implement proper offline support
6. Follow React Native best practices for performance
7. Use Expo's OTA updates for quick deployments
8. Implement the solutions for iPhone13 and iPhone14, remember to optimize iOS.
`;

// TypeScript Guidelines
const typescriptGuidelines = `
1. Always define proper interfaces for props
2. Use type-safe navigation with React Navigation
3. Implement proper error handling with try-catch
4. Use strict TypeScript configuration
5. Define custom types in separate files when needed
`;

// Component Guidelines
const componentGuidelines = `
1. Use functional components with hooks
2. Implement proper prop validation with TypeScript
3. Use StyleSheet for all styling
4. Keep components focused and single-purpose
5. Implement proper error boundaries
6. Use React.memo for performance optimization when needed
`;

// Navigation Guidelines
const navigationGuidelines = `
1. Use type-safe navigation with @react-navigation
2. Define navigation types in App.tsx
3. Keep navigation logic in separate files
4. Implement proper screen options
5. Use proper navigation patterns (stack, tab, drawer)
`;

// State Management Guidelines
const stateManagementGuidelines = `
1. Use React hooks for local state
2. Use expo-secure-store for sensitive data
3. Use AsyncStorage for non-sensitive data
4. Implement proper loading states
5. Handle errors gracefully
`;

// Performance Guidelines
const performanceGuidelines = `
1. Use React.memo for expensive components
2. Implement proper list virtualization
3. Optimize images and assets
4. Use proper key props in lists
5. Avoid unnecessary re-renders
6. Use useCallback and useMemo when appropriate
`; 